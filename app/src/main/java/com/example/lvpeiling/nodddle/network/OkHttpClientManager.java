package com.example.lvpeiling.nodddle.network;import android.os.Handler;import android.util.Log;import android.webkit.CookieManager;import com.alibaba.fastjson.JSONArray;import com.example.lvpeiling.nodddle.NodddleApplication;import java.io.IOException;import java.net.CookiePolicy;import java.util.Map;import java.util.concurrent.TimeUnit;import okhttp3.Call;import okhttp3.Callback;import okhttp3.FormBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;/** * Created by lvpeiling on 2017/5/3. */public class OkHttpClientManager {    private static final String TAG = "OkHttpClientManager";    private static OkHttpClientManager mOkHttpInstance;    private OkHttpClient mOkHttpClient;    private Handler mHandler;    public static OkHttpClientManager getInstance(){        if(mOkHttpInstance == null){            synchronized (OkHttpClientManager.class) {                if (mOkHttpInstance == null) {                    mOkHttpInstance = new OkHttpClientManager();                }            }        }        return mOkHttpInstance;    }    private OkHttpClientManager(){        mOkHttpClient = new OkHttpClient();        //30秒后超时        mOkHttpClient.newBuilder().connectTimeout(10, TimeUnit.SECONDS);        mHandler = new Handler();    }    /**     *  Get同步     * @param url     * @param params     * @return     * @throws IOException     */    public Response getSyncForResponse(String url, Map<String, Object> params) throws IOException {        Call call =  getData(Method.GET,url,params);        return call.execute();    }    /**     *  Get同步     * @param url     * @param params     * @return     * @throws IOException     */    public String getSyncForString(String url, Map<String, Object> params) throws IOException {        Call call =  getData(Method.GET,url,params);        return call.execute().body().string();    }    public void getAsync(String url,Map<String, Object> params,ResultCallBack callBack){        Call call = getData(Method.GET,url,params);        if(call != null){            resultCallBack(call,callBack);        }    }    private void resultCallBack(Call call, final ResultCallBack callBack) {        call.enqueue(new Callback() {            @Override            public void onFailure(final Call call,final IOException e) {                mHandler.post(new Runnable() {                    @Override                    public void run() {                        callBack.onError(call,e);                    }                });            }            @Override            public void onResponse(Call call, final Response response) throws IOException {                mHandler.post(new Runnable() {                    @Override                    public void run() {                        callBack.onResponse(response);                    }                });            }        });    }    /**     * post异步     * @param url     * @param params     * @param callBack     */    public void postAsync(String url, Map<String, Object> params, ResultCallBack callBack){        Call call = getData(Method.POST,url,params);        if(call != null){            resultCallBack(call,callBack);        }    }    public void deleteAsync(String url, Map<String, Object> params, ResultCallBack callBack){        Call call = getData(Method.DELETE,url,params);        if(call != null){            resultCallBack(call,callBack);        }    }    public void putAsync(String url, Map<String, Object> params, ResultCallBack callBack){        Call call = getData(Method.PUT,url,params);        if(call != null){            resultCallBack(call,callBack);        }    }    private Call getData(Method method, String url, Map<String, Object> params) {        Request request = null;        Request.Builder build = null;        switch (method) {            case GET:                if (params != null) {                    url = getParamUrl(url, params);                }                build = new Request.Builder().url(url);                if(NodddleApplication.getInstance().getTokenCode() != null){                    build.addHeader("Authorization", "bearer " +                            NodddleApplication.getInstance().getTokenCode());                }else {                    return null;                }                request = build.build();                return mOkHttpClient.newCall(request);            case POST:                FormBody.Builder builder = new FormBody.Builder();                if (params != null) {                    for (String key : params.keySet()) {                        builder.add(key, (String) params.get(key));                    }                }                build = new Request.Builder().url(url).post(builder.build());                if(NodddleApplication.getInstance().getTokenCode() != null){                    build.addHeader("Authorization", "bearer " +                            NodddleApplication.getInstance().getTokenCode());                }else {                    return null;                }                request = build.build();                return mOkHttpClient.newCall(request);            case PUT:                FormBody.Builder builderPut = new FormBody.Builder();                if (params != null) {                    for (String key : params.keySet()) {                        builderPut.add(key, (String) params.get(key));                    }                }                build = new Request.Builder().url(url).put(builderPut.build());                if(NodddleApplication.getInstance().getTokenCode() != null){                    build.addHeader("Authorization", "bearer " +                            NodddleApplication.getInstance().getTokenCode());                }else {                    return null;                }                request = build.build();                return mOkHttpClient.newCall(request);            case DELETE:                FormBody.Builder builderDele = new FormBody.Builder();                if (params != null) {                    for (String key : params.keySet()) {                        builderDele.add(key, (String) params.get(key));                    }                }                build = new Request.Builder().url(url).delete(builderDele.build());                if(NodddleApplication.getInstance().getTokenCode() != null){                    build.addHeader("Authorization", "bearer " +                            NodddleApplication.getInstance().getTokenCode());                }else {                    return null;                }                request = build.build();                return mOkHttpClient.newCall(request);            default:                Log.e(TAG,"method is not correct!");                return null;        }    }    private String getParamUrl(String url, Map<String, Object> params) {        StringBuilder sb = new StringBuilder();        sb.append(url+"?");        for (String key : params.keySet()) {            sb.append(key);            sb.append("=");            sb.append((String) params.get(key));            sb.append("&");        }        sb.deleteCharAt(sb.length()-1);        return sb.toString();    }}